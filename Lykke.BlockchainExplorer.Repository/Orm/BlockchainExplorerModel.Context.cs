//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lykke.BlockchainExplorer.Repository.Orm
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetBlockById_Result> GetBlockById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBlockById_Result>("GetBlockById", idParameter);
        }
    
        public virtual int InsertAsset(string hash, string name, string shortName, string description, string descriptionMime, string type, string contractUrl, string metadataUrl, string finalMetadataUrl, string issuer, Nullable<bool> verifiedIssuer, Nullable<int> divisibility, string iconUrl, string imageUrl, string version)
        {
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("shortName", shortName) :
                new ObjectParameter("shortName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var descriptionMimeParameter = descriptionMime != null ?
                new ObjectParameter("descriptionMime", descriptionMime) :
                new ObjectParameter("descriptionMime", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var contractUrlParameter = contractUrl != null ?
                new ObjectParameter("contractUrl", contractUrl) :
                new ObjectParameter("contractUrl", typeof(string));
    
            var metadataUrlParameter = metadataUrl != null ?
                new ObjectParameter("metadataUrl", metadataUrl) :
                new ObjectParameter("metadataUrl", typeof(string));
    
            var finalMetadataUrlParameter = finalMetadataUrl != null ?
                new ObjectParameter("finalMetadataUrl", finalMetadataUrl) :
                new ObjectParameter("finalMetadataUrl", typeof(string));
    
            var issuerParameter = issuer != null ?
                new ObjectParameter("issuer", issuer) :
                new ObjectParameter("issuer", typeof(string));
    
            var verifiedIssuerParameter = verifiedIssuer.HasValue ?
                new ObjectParameter("verifiedIssuer", verifiedIssuer) :
                new ObjectParameter("verifiedIssuer", typeof(bool));
    
            var divisibilityParameter = divisibility.HasValue ?
                new ObjectParameter("divisibility", divisibility) :
                new ObjectParameter("divisibility", typeof(int));
    
            var iconUrlParameter = iconUrl != null ?
                new ObjectParameter("iconUrl", iconUrl) :
                new ObjectParameter("iconUrl", typeof(string));
    
            var imageUrlParameter = imageUrl != null ?
                new ObjectParameter("imageUrl", imageUrl) :
                new ObjectParameter("imageUrl", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAsset", hashParameter, nameParameter, shortNameParameter, descriptionParameter, descriptionMimeParameter, typeParameter, contractUrlParameter, metadataUrlParameter, finalMetadataUrlParameter, issuerParameter, verifiedIssuerParameter, divisibilityParameter, iconUrlParameter, imageUrlParameter, versionParameter);
        }
    
        public virtual int InsertBlock(string hash, Nullable<long> height, Nullable<System.DateTime> time, Nullable<long> confirmations, Nullable<double> difficulty, string merkleRoot, Nullable<long> nonce, Nullable<int> totalTransactions, Nullable<bool> isImported, string previousBlockHash, string serializedData)
        {
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(long));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.DateTime));
    
            var confirmationsParameter = confirmations.HasValue ?
                new ObjectParameter("confirmations", confirmations) :
                new ObjectParameter("confirmations", typeof(long));
    
            var difficultyParameter = difficulty.HasValue ?
                new ObjectParameter("difficulty", difficulty) :
                new ObjectParameter("difficulty", typeof(double));
    
            var merkleRootParameter = merkleRoot != null ?
                new ObjectParameter("merkleRoot", merkleRoot) :
                new ObjectParameter("merkleRoot", typeof(string));
    
            var nonceParameter = nonce.HasValue ?
                new ObjectParameter("nonce", nonce) :
                new ObjectParameter("nonce", typeof(long));
    
            var totalTransactionsParameter = totalTransactions.HasValue ?
                new ObjectParameter("totalTransactions", totalTransactions) :
                new ObjectParameter("totalTransactions", typeof(int));
    
            var isImportedParameter = isImported.HasValue ?
                new ObjectParameter("isImported", isImported) :
                new ObjectParameter("isImported", typeof(bool));
    
            var previousBlockHashParameter = previousBlockHash != null ?
                new ObjectParameter("previousBlockHash", previousBlockHash) :
                new ObjectParameter("previousBlockHash", typeof(string));
    
            var serializedDataParameter = serializedData != null ?
                new ObjectParameter("serializedData", serializedData) :
                new ObjectParameter("serializedData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBlock", hashParameter, heightParameter, timeParameter, confirmationsParameter, difficultyParameter, merkleRootParameter, nonceParameter, totalTransactionsParameter, isImportedParameter, previousBlockHashParameter, serializedDataParameter);
        }
    
        public virtual int InsertTransaction(string hash, Nullable<System.DateTime> time, Nullable<long> confirmations, Nullable<bool> isColor, Nullable<bool> isCoinBase, string hex, Nullable<long> fees, string blockHash, Nullable<bool> isImported, string serializedData)
        {
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.DateTime));
    
            var confirmationsParameter = confirmations.HasValue ?
                new ObjectParameter("confirmations", confirmations) :
                new ObjectParameter("confirmations", typeof(long));
    
            var isColorParameter = isColor.HasValue ?
                new ObjectParameter("isColor", isColor) :
                new ObjectParameter("isColor", typeof(bool));
    
            var isCoinBaseParameter = isCoinBase.HasValue ?
                new ObjectParameter("isCoinBase", isCoinBase) :
                new ObjectParameter("isCoinBase", typeof(bool));
    
            var hexParameter = hex != null ?
                new ObjectParameter("hex", hex) :
                new ObjectParameter("hex", typeof(string));
    
            var feesParameter = fees.HasValue ?
                new ObjectParameter("fees", fees) :
                new ObjectParameter("fees", typeof(long));
    
            var blockHashParameter = blockHash != null ?
                new ObjectParameter("blockHash", blockHash) :
                new ObjectParameter("blockHash", typeof(string));
    
            var isImportedParameter = isImported.HasValue ?
                new ObjectParameter("isImported", isImported) :
                new ObjectParameter("isImported", typeof(bool));
    
            var serializedDataParameter = serializedData != null ?
                new ObjectParameter("serializedData", serializedData) :
                new ObjectParameter("serializedData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransaction", hashParameter, timeParameter, confirmationsParameter, isColorParameter, isCoinBaseParameter, hexParameter, feesParameter, blockHashParameter, isImportedParameter, serializedDataParameter);
        }
    
        public virtual int InsertTransactionItem(string transactionHash, Nullable<int> type, string address, Nullable<int> index, Nullable<long> value, string assetHash, Nullable<long> quantity)
        {
            var transactionHashParameter = transactionHash != null ?
                new ObjectParameter("transactionHash", transactionHash) :
                new ObjectParameter("transactionHash", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var indexParameter = index.HasValue ?
                new ObjectParameter("index", index) :
                new ObjectParameter("index", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(long));
    
            var assetHashParameter = assetHash != null ?
                new ObjectParameter("assetHash", assetHash) :
                new ObjectParameter("assetHash", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransactionItem", transactionHashParameter, typeParameter, addressParameter, indexParameter, valueParameter, assetHashParameter, quantityParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsBlockImported(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsBlockImported", idParameter);
        }
    
        public virtual ObjectResult<GetTransactionById_Result> GetTransactionById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionById_Result>("GetTransactionById", idParameter);
        }
    
        public virtual ObjectResult<GetTransactionItems_Result> GetTransactionItems(Nullable<int> transactionId, Nullable<int> itemType)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(int));
    
            var itemTypeParameter = itemType.HasValue ?
                new ObjectParameter("itemType", itemType) :
                new ObjectParameter("itemType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionItems_Result>("GetTransactionItems", transactionIdParameter, itemTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> IsTransactionImported(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("IsTransactionImported", idParameter);
        }
    
        public virtual ObjectResult<GetAssetsByTransaction_Result> GetAssetsByTransaction(Nullable<int> transactionId)
        {
            var transactionIdParameter = transactionId.HasValue ?
                new ObjectParameter("transactionId", transactionId) :
                new ObjectParameter("transactionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssetsByTransaction_Result>("GetAssetsByTransaction", transactionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> AssetExists(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("AssetExists", idParameter);
        }
    
        public virtual ObjectResult<GetAssetById_Result> GetAssetById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssetById_Result>("GetAssetById", idParameter);
        }
    
        public virtual int SetBlockAsImported(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetBlockAsImported", idParameter);
        }
    
        public virtual int SetTransactionAsImported(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetTransactionAsImported", idParameter);
        }
    
        public virtual int InsertLog(string logType, string component, string process, string context, string data, Nullable<System.DateTime> time)
        {
            var logTypeParameter = logType != null ?
                new ObjectParameter("logType", logType) :
                new ObjectParameter("logType", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("component", component) :
                new ObjectParameter("component", typeof(string));
    
            var processParameter = process != null ?
                new ObjectParameter("process", process) :
                new ObjectParameter("process", typeof(string));
    
            var contextParameter = context != null ?
                new ObjectParameter("context", context) :
                new ObjectParameter("context", typeof(string));
    
            var dataParameter = data != null ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(string));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLog", logTypeParameter, componentParameter, processParameter, contextParameter, dataParameter, timeParameter);
        }
    
        public virtual ObjectResult<GetAssetOwners_Result> GetAssetOwners(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssetOwners_Result>("GetAssetOwners", idParameter);
        }
    
        public virtual ObjectResult<GetAssets_Result> GetAssets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAssets_Result>("GetAssets");
        }
    
        public virtual ObjectResult<GetAdressAssets_Result> GetAdressAssets(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdressAssets_Result>("GetAdressAssets", idParameter);
        }
    
        public virtual int UpdateAddress(string hash, string coloredAddress, string uncoloredAddress)
        {
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            var coloredAddressParameter = coloredAddress != null ?
                new ObjectParameter("coloredAddress", coloredAddress) :
                new ObjectParameter("coloredAddress", typeof(string));
    
            var uncoloredAddressParameter = uncoloredAddress != null ?
                new ObjectParameter("uncoloredAddress", uncoloredAddress) :
                new ObjectParameter("uncoloredAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddress", hashParameter, coloredAddressParameter, uncoloredAddressParameter);
        }
    
        public virtual ObjectResult<GetAddressAssets_Result> GetAddressAssets(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAddressAssets_Result>("GetAddressAssets", idParameter);
        }
    
        public virtual ObjectResult<GetAddressById_Result> GetAddressById(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAddressById_Result>("GetAddressById", idParameter);
        }
    
        public virtual int InsertAddress(string hash, string coloredAddress, string uncoloredAddress, Nullable<decimal> balance)
        {
            var hashParameter = hash != null ?
                new ObjectParameter("hash", hash) :
                new ObjectParameter("hash", typeof(string));
    
            var coloredAddressParameter = coloredAddress != null ?
                new ObjectParameter("coloredAddress", coloredAddress) :
                new ObjectParameter("coloredAddress", typeof(string));
    
            var uncoloredAddressParameter = uncoloredAddress != null ?
                new ObjectParameter("uncoloredAddress", uncoloredAddress) :
                new ObjectParameter("uncoloredAddress", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAddress", hashParameter, coloredAddressParameter, uncoloredAddressParameter, balanceParameter);
        }
    }
}
